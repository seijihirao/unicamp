library ieee;
use ieee.std_logic_1164.all;

entity shift_register is
generic (N : integer := 6);
port(
    clk     : in  std_logic;
    mode    : in  std_logic_vector(1 downto 0);
    ser_in  : in  std_logic;
    par_in  : in  std_logic_vector((N - 1) downto 0);
    par_out : out std_logic_vector((N - 1) downto 0)
  );
end shift_register;

architecture rtl of shift_register is
	component mux4_to_1
		port(d3, d2, d1, d0 : in std_logic;
			  sel : in std_logic_vector(1 downto 0);
			  output : out std_logic);
	end component ;
	component ff_d
		port(D, Clk, Preset, Clear: in std_logic := '1';
			  Q, Q_n: out std_logic);
	end component ;
	
	signal ff_Q: std_logic_vector(N+1 downto 0);
	signal mux_Q: std_logic_vector(N-1 downto 0);

begin
	ff_Q(0) <= ser_in;
	ff_Q(N+1) <= ser_in;
	shift:
		for i in 1 to N generate
			ff: ff_d port map (
				D => mux_Q(i-1),
				Clk => clk,
				Preset => '0',
				Clear => '0',
				Q => ff_Q(i),
				Q_n => open
			);
			mux: mux4_to_1 port map (
				d3 => par_in(i-1),
				d2 => ff_Q(i+1),
				d1 => ff_Q(i-1),
				d0 => ff_Q(i),
				sel => mode,
				output => mux_Q(i-1)
			);
			par_out(i-1) <= ff_Q(i);
		end generate;
end rtl;
